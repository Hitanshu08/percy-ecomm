#!/usr/bin/env python3
"""Script to create the database setup notebook"""

import json

notebook = {
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Database Setup and Seeding Notebook\n",
                "\n",
                "This notebook handles database initialization, table creation, and seeding with initial data.\n",
                "\n",
                "## Overview\n",
                "The notebook performs the following operations:\n",
                "1. Import required modules and load configuration\n",
                "2. Create database tables\n",
                "3. Seed initial users (admin, test users)\n",
                "4. Seed initial services (Quillbot, Grammarly, ChatGPT)\n",
                "5. Verify the setup\n",
                "\n",
                "## Prerequisites\n",
                "- Ensure your `.env` file is properly configured\n",
                "- Database connection should be working\n",
                "- All required packages should be installed"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Import required modules\n",
                "import sys\n",
                "import os\n",
                "from pathlib import Path\n",
                "sys.path.append(os.path.dirname(os.path.abspath('.')))\n",
                "\n",
                "from core.security import get_password_hash\n",
                "from core.config import settings\n",
                "from db.session import Base, engine\n",
                "from db.models.user import User\n",
                "from db.models.service import Service\n",
                "from sqlalchemy.orm import Session\n",
                "import logging\n",
                "\n",
                "# Set up logging\n",
                "logging.basicConfig(level=logging.INFO)\n",
                "logger = logging.getLogger(__name__)\n",
                "\n",
                "print(\"✓ All modules imported successfully\")\n",
                "print(f\"Database URL: {settings.DATABASE_URL}\")\n",
                "print(f\"Admin Username: {settings.ADMIN_USERNAME}\")\n",
                "print(f\"Admin Email: {settings.ADMIN_EMAIL}\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 1. Create Database Tables\n",
                "First, let's create all the necessary database tables."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "print(\"Creating database tables...\")\n",
                "\n",
                "try:\n",
                "    # Create all tables\n",
                "    Base.metadata.create_all(bind=engine)\n",
                "    print(\"✓ All database tables created successfully\")\n",
                "except Exception as e:\n",
                "    print(f\"✗ Error creating tables: {e}\")\n",
                "    raise e"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 2. Define Sample Data\n",
                "Define the sample data that will be seeded into the database."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# Sample users data\n",
                "SAMPLE_USERS = {\n",
                "    \"admin\": {\n",
                "        \"username\": settings.ADMIN_USERNAME,\n",
                "        \"email\": settings.ADMIN_EMAIL,\n",
                "        \"user_id\": settings.ADMIN_USER_ID,\n",
                "        \"hashed_password\": get_password_hash(settings.ADMIN_PASSWORD),\n",
                "        \"role\": settings.ADMIN_ROLE,\n",
                "        \"services\": [\n",
                "            {\"service_id\": \"qb1\", \"end_date\": \"31/12/2025\", \"is_active\": True, \"credits\": 3500},  # 1 year Quillbot\n",
                "            {\"service_id\": \"gram1\", \"end_date\": \"31/12/2025\", \"is_active\": True, \"credits\": 3000},  # 1 year Grammarly\n",
                "            {\"service_id\": \"chat1\", \"end_date\": \"31/10/2025\", \"is_active\": True, \"credits\": 4500}   # 1 year ChatGPT\n",
                "        ],\n",
                "        \"credits\": 100000,\n",
                "        \"btc_address\": \"bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh\",\n",
                "        \"profile\": {\n",
                "            \"first_name\": \"Admin\",\n",
                "            \"last_name\": \"User\",\n",
                "            \"phone\": \"+1-555-0123\",\n",
                "            \"country\": \"United States\",\n",
                "            \"timezone\": \"UTC-5\",\n",
                "            \"preferences\": {\n",
                "                \"email_notifications\": True,\n",
                "                \"sms_notifications\": False,\n",
                "                \"theme\": \"dark\"\n",
                "            }\n",
                "        }\n",
                "    },\n",
                "    \"testuser\": {\n",
                "        \"username\": \"testuser\",\n",
                "        \"email\": \"test@example.com\",\n",
                "        \"user_id\": \"testuser\",\n",
                "        \"hashed_password\": get_password_hash(\"userpass123\"),\n",
                "        \"role\": \"user\",\n",
                "        \"services\": [\n",
                "            {\"service_id\": \"qb1\", \"end_date\": \"31/12/2025\", \"is_active\": True, \"credits\": 500}  # 1 month Quillbot\n",
                "        ],\n",
                "        \"credits\": 500,\n",
                "        \"btc_address\": \"btc-testuser\",\n",
                "        \"profile\": {\n",
                "            \"first_name\": \"Test\",\n",
                "            \"last_name\": \"User\",\n",
                "            \"phone\": \"+1-555-9999\",\n",
                "            \"country\": \"Canada\",\n",
                "            \"timezone\": \"UTC-8\",\n",
                "            \"preferences\": {\n",
                "                \"email_notifications\": True,\n",
                "                \"sms_notifications\": True,\n",
                "                \"theme\": \"light\"\n",
                "            }\n",
                "        }\n",
                "    },\n",
                "    \"premiumuser\": {\n",
                "        \"username\": \"premiumuser\",\n",
                "        \"email\": \"premium@example.com\",\n",
                "        \"user_id\": \"premiumuser\",\n",
                "        \"hashed_password\": get_password_hash(\"premium123\"),\n",
                "        \"role\": \"user\",\n",
                "        \"services\": [\n",
                "            {\"service_id\": \"qb2\", \"end_date\": \"30/11/2025\", \"is_active\": True, \"credits\": 1200},  # 3 months Quillbot\n",
                "            {\"service_id\": \"chat1\", \"end_date\": \"31/10/2025\", \"is_active\": True, \"credits\": 1500}   # 3 months ChatGPT\n",
                "        ],\n",
                "        \"credits\": 2500,\n",
                "        \"btc_address\": \"bc1qpremiumuser123456789\",\n",
                "        \"profile\": {\n",
                "            \"first_name\": \"Premium\",\n",
                "            \"last_name\": \"Customer\",\n",
                "            \"phone\": \"+1-555-8888\",\n",
                "            \"country\": \"United Kingdom\",\n",
                "            \"timezone\": \"UTC+0\",\n",
                "            \"preferences\": {\n",
                "                \"email_notifications\": True,\n",
                "                \"sms_notifications\": False,\n",
                "                \"theme\": \"auto\"\n",
                "            }\n",
                "        }\n",
                "    }\n",
                "}\n",
                "\n",
                "# Sample services data\n",
                "SAMPLE_SERVICES = {\n",
                "    \"Quillbot\": {\n",
                "        \"name\": \"Quillbot\",\n",
                "        \"image\": \"https://via.placeholder.com/300x200/4F46E5/FFFFFF?text=Quillbot\",\n",
                "        \"accounts\": [\n",
                "            {\"id\": \"qb1\", \"password\": \"pass1\", \"end_date\": \"31/12/2025\", \"is_active\": True},\n",
                "            {\"id\": \"qb2\", \"password\": \"pass2\", \"end_date\": \"30/11/2025\", \"is_active\": True}\n",
                "        ]\n",
                "    },\n",
                "    \"Grammarly\": {\n",
                "        \"name\": \"Grammarly\", \n",
                "        \"image\": \"https://via.placeholder.com/300x200/10B981/FFFFFF?text=Grammarly\",\n",
                "        \"accounts\": [\n",
                "            {\"id\": \"gram1\", \"password\": \"pass3\", \"end_date\": \"31/12/2025\", \"is_active\": True}\n",
                "        ]\n",
                "    },\n",
                "    \"ChatGPT\": {\n",
                "        \"name\": \"ChatGPT\",\n",
                "        \"image\": \"https://via.placeholder.com/300x200/8B5CF6/FFFFFF?text=ChatGPT\", \n",
                "        \"accounts\": [\n",
                "            {\"id\": \"chat1\", \"password\": \"pass4\", \"end_date\": \"31/01/2026\", \"is_active\": True}\n",
                "        ]\n",
                "    }\n",
                "}\n",
                "\n",
                "print(\"✓ Sample data defined successfully\")\n",
                "print(f\"Users to create: {list(SAMPLE_USERS.keys())}\")\n",
                "print(f\"Services to create: {list(SAMPLE_SERVICES.keys())}\")"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 3. Seed Users\n",
                "Seed the database with initial user data if no users exist."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "print(\"Seeding users...\")\n",
                "\n",
                "try:\n",
                "    with Session(bind=engine, future=True) as db:\n",
                "        # Check if users already exist\n",
                "        existing_users = db.query(User).count()\n",
                "        print(f\"Found {existing_users} existing users\")\n",
                "        \n",
                "        if existing_users == 0:\n",
                "            print(\"No users found, creating sample users...\")\n",
                "            \n",
                "            for username, user_data in SAMPLE_USERS.items():\n",
                "                user = User(\n",
                "                    user_id=user_data.get(\"user_id\", username),\n",
                "                    username=user_data[\"username\"],\n",
                "                    email=user_data[\"email\"],\n",
                "                    hashed_password=user_data[\"hashed_password\"],\n",
                "                    role=user_data.get(\"role\", \"user\"),\n",
                "                    credits=user_data.get(\"credits\", 0),\n",
                "                    btc_address=user_data.get(\"btc_address\", \"\"),\n",
                "                    services=user_data.get(\"services\", []),\n",
                "                    profile=user_data.get(\"profile\", {}),\n",
                "                )\n",
                "                db.add(user)\n",
                "                print(f\"  ✓ Added user: {username}\")\n",
                "            \n",
                "            db.commit()\n",
                "            print(\"✓ All users created successfully\")\n",
                "        else:\n",
                "            print(\"Users already exist, skipping user creation\")\n",
                "            \n",
                "except Exception as e:\n",
                "    print(f\"✗ Error seeding users: {e}\")\n",
                "    raise e"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 4. Seed Services\n",
                "Seed the database with initial service data if no services exist."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "print(\"Seeding services...\")\n",
                "\n",
                "try:\n",
                "    with Session(bind=engine, future=True) as db:\n",
                "        # Check if services already exist\n",
                "        existing_services = db.query(Service).count()\n",
                "        print(f\"Found {existing_services} existing services\")\n",
                "        \n",
                "        if existing_services == 0:\n",
                "            print(\"No services found, creating sample services...\")\n",
                "            \n",
                "            for service_name, service_data in SAMPLE_SERVICES.items():\n",
                "                service = Service(\n",
                "                    name=service_data[\"name\"],\n",
                "                    image=service_data.get(\"image\", \"\"),\n",
                "                    accounts=service_data.get(\"accounts\", []),\n",
                "                    is_active=True,\n",
                "                )\n",
                "                db.add(service)\n",
                "                print(f\"  ✓ Added service: {service_name}\")\n",
                "            \n",
                "            db.commit()\n",
                "            print(\"✓ All services created successfully\")\n",
                "        else:\n",
                "            print(\"Services already exist, skipping service creation\")\n",
                "            \n",
                "except Exception as e:\n",
                "    print(f\"✗ Error seeding services: {e}\")\n",
                "    raise e"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 5. Verify Setup\n",
                "Verify that the database setup was successful by checking the created data."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "print(\"Verifying database setup...\")\n",
                "\n",
                "try:\n",
                "    with Session(bind=engine, future=True) as db:\n",
                "        # Count users and services\n",
                "        user_count = db.query(User).count()\n",
                "        service_count = db.query(Service).count()\n",
                "        \n",
                "        print(f\"✓ Database verification complete:\")\n",
                "        print(f\"  - Users: {user_count}\")\n",
                "        print(f\"  - Services: {service_count}\")\n",
                "        \n",
                "        # Show some sample data\n",
                "        if user_count > 0:\n",
                "            print(\"\\nSample users:\")\n",
                "            users = db.query(User).limit(3).all()\n",
                "            for user in users:\n",
                "                print(f\"  - {user.username} ({user.role}): {user.credits} credits\")\n",
                "        \n",
                "        if service_count > 0:\n",
                "            print(\"\\nSample services:\")\n",
                "            services = db.query(Service).limit(3).all()\n",
                "            for service in services:\n",
                "                print(f\"  - {service.name}: {len(service.accounts or [])} accounts\")\n",
                "        \n",
                "        print(\"\\n✅ Database setup completed successfully!\")\n",
                "        \n",
                "except Exception as e:\n",
                "    print(f\"✗ Error verifying setup: {e}\")\n",
                "    raise e"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "## 6. Optional: Reset Database\n",
                "If you need to reset the database, uncomment and run the cell below.\n",
                "**Warning: This will delete all data!**"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": None,
            "metadata": {},
            "outputs": [],
            "source": [
                "# UNCOMMENT ONLY IF YOU WANT TO RESET THE DATABASE\n",
                "# print(\"⚠️  WARNING: This will delete all data!\")\n",
                "# \n",
                "# try:\n",
                "#     # Drop all tables\n",
                "#     Base.metadata.drop_all(bind=engine)\n",
                "#     print(\"✓ All tables dropped\")\n",
                "#     \n",
                "#     # Recreate tables\n",
                "#     Base.metadata.create_all(bind=engine)\n",
                "#     print(\"✓ Tables recreated\")\n",
                "#     \n",
                "#     print(\"\\nNow you can run the seeding cells above to recreate the data.\")\n",
                "#     \n",
                "# except Exception as e:\n",
                "#     print(f\"✗ Error resetting database: {e}\")\n",
                "#     raise e"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.8.0"
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4
}

# Write the notebook to file
with open('database_setup.ipynb', 'w') as f:
    json.dump(notebook, f, indent=1)

print("✓ Notebook created successfully!")
print("File: database_setup.ipynb")
